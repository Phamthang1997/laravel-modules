<?php

declare(strict_types=1);

namespace App\Traits\Handler;

use App\Enums\ModulesPrefix;
use ErrorException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Response;
use Illuminate\Support\Str;
use Modules\Mobile\Exceptions\BaseException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

trait HasModulesHandler
{
    /**
     * @param $request
     * @param Throwable $e
     * @return JsonResponse|RedirectResponse|Response|\Symfony\Component\HttpFoundation\Response
     * @throws Throwable
     */
    public function render($request, Throwable $e): JsonResponse|RedirectResponse|Response|\Symfony\Component\HttpFoundation\Response
    {
        // web
        if ($request->is(ModulesPrefix::Administrator->value.'/*')) {
            return match (true) {
                $e instanceof NotFoundHttpException =>
                    response()->view(Str::lower(ModulesPrefix::Administrator->name).'::error.404'), // @phpstan-ignore-line
                $e instanceof ErrorException =>
                    response()->view(Str::lower(ModulesPrefix::Administrator->name).'::error.500'), // @phpstan-ignore-line
                $e instanceof AuthenticationException =>
                    response()->view(Str::lower(ModulesPrefix::Administrator->name).'::error.403'), // @phpstan-ignore-line
                default => parent::render($request, $e),
            };
        }
        // api
        if ($request->wantsJson() || $request->is(ModulesPrefix::Mobile->value.'/*')) {
            return match (true) {
                $e instanceof AuthenticationException,
                $e instanceof MethodNotAllowedHttpException => throw new BaseException($e),
                default => parent::render($request, $e),
            };
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
