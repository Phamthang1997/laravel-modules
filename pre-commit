#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

#path tool composer dependencies
PHPCS_BIN=./vendor/bin/phpcs
PHPCBF_BIN=./vendor/bin/phpcbf
PHPSTAN_BIN=./vendor/bin/phpstan
PHPMD_BIN=./vendor/bin/phpmd

# Check for PHPCS / PHPCBF
if [ ! -x $PHPCS_BIN ]; then
    echo "[PRE-COMMIT] PHP CodeSniffer is not installed locally."
    echo "[PRE-COMMIT] Please run 'composer install' or check the path: $PHPCS_BIN"
    exit 1
fi

if [ ! -x $PHPCBF_BIN ]; then
    echo "[PRE-COMMIT] PHP Code Beautifier and Fixer is not installed locally."
    echo "[PRE-COMMIT] Please run 'composer install' or check the path: $PHPCBF_BIN"
    exit 1
fi

# Set run proceed check
proceed='y'

# Coding Standards
if [ "$proceed" = 'y' ]; then
	phpfiles=$(git diff --name-only --diff-filter=d $against | grep \.php)
	  if [ "$phpfiles" != "" ]; then
			echo "[PRE-COMMIT] Checking PHPCS..."

			phpcsoutput=$($PHPCS_BIN --standard=phpcs.xml -p $phpfiles -d error_reporting=E_ALL~E_DEPRECATED)

				if [ "$?" != 0 ]; then
					  echo "[PRE-COMMIT] PHP Code Beautifier all problems."	\n\n
					  echo "$phpcsoutput"
					  exit 1;
				else
					  echo "[PRE-COMMIT] No errors found."
				fi
			echo "[PRE-COMMIT] Done checking PHPCS."\n\n
	  fi
fi

#PHPStan's

if [ "$proceed" = 'y' ]; then
	phpfiles=$(git diff --name-only --diff-filter=d $against | grep \.php)
	  if [ "$phpfiles" != "" ]; then
			echo "[PRE-COMMIT] Checking PHPStan's ..."

			phpstanoutput=$($PHPSTAN_BIN analyse)

				if [ "$?" != 0 ]; then
					  echo "[PRE-COMMIT] PHPStan's all problems."\n\n
					  echo "$phpstanoutput"
					  exit 1;
				else
					  echo "[PRE-COMMIT] No errors found."
				fi
			echo "[PRE-COMMIT] Done checking PHPStan's."\n\n
	  fi
fi

# Mess Detector

if [ "$proceed" = 'y' ]; then
	project=$(git rev-parse --show-toplevel)
	phpfiles=$(git diff --name-only --diff-filter=d $against | grep \.php)
	  if [ "$phpfiles" != "" ]; then
			echo "\n[PRE-COMMIT] Checking PHPMD...\n"

				for file in $phpfiles
				do
					$PHPMD_BIN $project/$file text unusedcode codesize naming,phpmd.xml

					if [ $? != 0 ]
					then
						echo "\n[PRE-COMMIT] Fix errors before commit."
						exit 1
					fi
				done
			echo "[PRE-COMMIT] Done checking PHPMD"\n\n
	  fi
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
